package com.example.mienhv1.survey.ui.fragment.info;

import android.Manifest;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.net.Uri;
import android.provider.MediaStore;
import android.support.v4.app.ActivityCompat;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ProgressBar;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.esafirm.imagepicker.features.ImagePicker;
import com.esafirm.imagepicker.features.camera.CameraModule;
import com.esafirm.imagepicker.features.camera.ImmediateCameraModule;
import com.esafirm.imagepicker.features.camera.OnImageReadyListener;
import com.esafirm.imagepicker.model.Image;
import com.example.datasource.model.DataResponse;
import com.example.datasource.model.DistrictModel;
import com.example.datasource.model.ProvinceModel;
import com.example.datasource.model.WardModel;
import com.example.mienhv1.survey.R;
import com.example.mienhv1.survey.ui.adapter.EnumSurveyFragment;
import com.example.mienhv1.survey.ui.fragment.ItemBaseSurveyFragment;
import com.example.mienhv1.survey.utils.uploadimage.ProgressRequestBody;
import com.example.mienhv1.survey.utils.view.CustomSpinnerAdapter;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import okhttp3.MultipartBody;

import static android.app.Activity.RESULT_OK;

/**
 * Created by Forev on 17/04/20.
 */

public class InfoFragment extends ItemBaseSurveyFragment implements InfoView,
        View.OnClickListener, ProgressRequestBody.UploadCallbacks {

    private ArrayList<Image> images = new ArrayList<>();
    private static final int RC_CODE_PICKER = 2000;
    private static final int RC_CAMERA = 3000;
    private TextView textView;
    private CameraModule cameraModule;

    InfoPresenter presenter;
    private String TAG = "InfoFragment";
    private Button pickimageButton;
    private Button uploadimageButton;
    private Button cameraonlyButton;
    private ProgressBar mProgressBar;
    private ProgressBar mProgressBarPercent;
    private TextView txtProgress;
    private Spinner provinceSpinner;
    private Spinner districtSpinner;
    private Spinner wardSpinner;
    private List<String> mUriString = new ArrayList<>();
    private List<Uri> mUriUri = new ArrayList<>();
    private String address = "";
    private String province = "";
    private String district = "";
    private String ward = "";
    private TextView addressTextView;


    @Override
    protected int getResourcesLayout() {
        return R.layout.fragment_general_information;
    }

    @Override
    protected void mapView(View view) {
        presenter = new InfoPresenter(getActivity(), this);
        pickimageButton = (Button) view.findViewById(R.id.pick_image);
        cameraonlyButton = (Button) view.findViewById(R.id.camera_only);
        uploadimageButton = (Button) view.findViewById(R.id.upload_image);
        mProgressBar = (ProgressBar) view.findViewById(R.id.progress_upload);
        mProgressBarPercent = (ProgressBar) view.findViewById(R.id.progress_bar_percent);
        txtProgress = (TextView) view.findViewById(R.id.text_progress);
        addressTextView = (TextView) view.findViewById(R.id.address_text_view);
        textView = (TextView) view.findViewById(R.id.text_view);
        provinceSpinner = (Spinner) view.findViewById(R.id.spinner_province_id);
        districtSpinner = (Spinner) view.findViewById(R.id.spinner_district_id);
        wardSpinner = (Spinner) view.findViewById(R.id.spinner_ward_id);
    }

    @Override
    protected void initData() {
        presenter.create();
        pickimageButton.setOnClickListener(this);
        cameraonlyButton.setOnClickListener(this);
        uploadimageButton.setOnClickListener(this);
        presenter.getProvinceList();
        setDefaultValueSpinner(provinceSpinner, getResources().getString(R.string.default_value_province));
        setDefaultValueSpinner(districtSpinner, getResources().getString(R.string.default_value_district));
        setDefaultValueSpinner(wardSpinner, getResources().getString(R.string.default_value_ward));
    }

    private void setDefaultValueSpinner(Spinner spinner, String defaultvalue) {
        ArrayList<String> TempList = new ArrayList<>();
        TempList.add(defaultvalue);
        ArrayAdapter adapter = new CustomSpinnerAdapter<>(getActivity(), android.R.layout.simple_spinner_item, TempList);
        spinner.setAdapter(adapter);
    }

    @Override
    public void onStart() {
        super.onStart();
        presenter.start();
    }

    @Override
    public void onResume() {
        super.onResume();
        presenter.resume();
    }

    @Override
    public void onPause() {
        super.onPause();
        presenter.pause();
    }

    @Override
    public void onStop() {
        super.onStop();
        presenter.stop();
    }

    @Override
    protected void destroyView() {

    }


    @Override
    public void showProgress() {
        mProgressBar.setVisibility(View.VISIBLE);
    }

    @Override
    public void hideProgress() {
        mProgressBar.setVisibility(View.GONE);
    }

    @Override
    public void showError(String error) {
        Toast.makeText(getActivity(), error, Toast.LENGTH_LONG).show();
    }

    @Override
    public EnumSurveyFragment fragmentType() {
        return EnumSurveyFragment.Common;
    }

    @Override
    public void onClick(View v) {
        if (v.getId() == R.id.pick_image) {
            start();
        }
        if (v.getId() == R.id.camera_only) {
            final String[] permissions = new String[]{Manifest.permission.CAMERA};
            if (ActivityCompat.checkSelfPermission(getActivity(), Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {
                ActivityCompat.requestPermissions(getActivity(), permissions, RC_CAMERA);
            } else {
                captureImage();
            }
        }
        if (v.getId() == R.id.upload_image) {
            if (getMutilPart() != null) {
                count = 0;
                txtProgress.setText("0/" + mUriString.size());
                presenter.uploadImage(getMutilPart());

            }
        }
    }

    private ArrayList<MultipartBody.Part> getMutilPart() {
        if (mUriString != null && mUriString.size() > 0) {
            ArrayList<MultipartBody.Part> listPart = new ArrayList<>();
            ArrayList<File> listFile = new ArrayList<>();

            for (int i = 0; i < mUriString.size(); i++) {
                String fileiPath = mUriString.get(i);
                File files = new File(fileiPath);
                listFile.add(files);
                ProgressRequestBody requestFile = new ProgressRequestBody(files, this);

                MultipartBody.Part body =
                        MultipartBody.Part.createFormData("photo", files.getName(), requestFile);
                listPart.add(body);
            }
            return listPart;
        }

        return null;
    }

    private String getRealPathFromURI(Uri contentURI) {
        String result;
        Cursor cursor = getActivity().getContentResolver().query(contentURI, null, null, null, null);
        if (cursor == null) {
            result = contentURI.getPath();
        } else {
            cursor.moveToFirst();
            int idx = cursor.getColumnIndex(MediaStore.Images.ImageColumns.DATA);
            result = cursor.getString(idx);
            cursor.close();
        }
        return result;
    }

    private void captureImage() {
        startActivityForResult(
                getCameraModule().getCameraIntent(getActivity()), RC_CAMERA);
    }

    private void start() {
        ImagePicker imagePicker = ImagePicker.create(this)
                .theme(R.style.ImagePickerTheme)
                .returnAfterFirst(true) // set whether pick action or camera action should return immediate result or not. Only works in single mode for image picker
                .folderMode(true) // set folder mode (false by default)
                .folderTitle("Folder") // folder selection title
                .imageTitle("Tap to select"); // image selection title

        if (false) {
            imagePicker.single();
        } else {
            imagePicker.multi(); // multi mode (default mode)
        }

        imagePicker.limit(10) // max images can be selected (99 by default)
                .showCamera(true) // show camera or not (true by default)
                .imageDirectory("Camera")   // captured image directory name ("Camera" folder by default)
                .origin(images) // original selected images, used in multi mode
                .start(RC_CODE_PICKER); // start image picker activity with request code
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (requestCode == RC_CODE_PICKER && resultCode == RESULT_OK && data != null) {
            images = (ArrayList<Image>) ImagePicker.getImages(data);
            mUriUri = (List<Uri>) data.getData();
            for (int i = 0; i < images.size(); i++) {
                mUriString.add(images.get(i).getPath());
            }
            printImages(images);
            return;
        }

        if (requestCode == RC_CAMERA && resultCode == RESULT_OK) {
            getCameraModule().getImage(getActivity(), data, new OnImageReadyListener() {
                @Override
                public void onImageReady(List<Image> resultImages) {
                    images = (ArrayList<Image>) resultImages;
                    printImages(images);
                }
            });
        }
    }

    private void printImages(List<Image> images) {
        if (images == null) return;

        StringBuilder stringBuffer = new StringBuilder();
        for (int i = 0, l = images.size(); i < l; i++) {
            stringBuffer.append(images.get(i).getPath()).append("\n");
        }
        textView.setText(stringBuffer.toString());
    }

    private ImmediateCameraModule getCameraModule() {
        if (cameraModule == null) {
            cameraModule = new ImmediateCameraModule();
        }
        return (ImmediateCameraModule) cameraModule;
    }

    int count = 0;

    //test update progress
    @Override
    public void onProgressUpdate(int percentage, int total) {
        mProgressBarPercent.setProgress(percentage);

        Log.d("InfomationFrag", "percent : " + percentage + "/" + total);
    }

    @Override
    public void onError() {
        Toast.makeText(getActivity(), "Progress update error", Toast.LENGTH_SHORT).show();
    }

    @Override
    public void onFinish() {
        count++;
        mProgressBarPercent.setProgress(100);
        txtProgress.setText(count + "/" + mUriString.size());
        Log.d("InfomationFrag", "finish");
    }

    @Override
    public void getListProvince(DataResponse<ProvinceModel> mdataRes) {
        ArrayList<String> nameProvinceList = new ArrayList<>();
        for (int i = 0; i < mdataRes.data.size(); i++) {
            nameProvinceList.add(mdataRes.data.get(i).type + " - " + mdataRes.data.get(i).name);
        }
        setAdapterProvince(nameProvinceList, mdataRes.data);
    }

    @Override
    public void getListDistrict(DataResponse<DistrictModel> mdataRes) {
        ArrayList<String> nameDistrictList = new ArrayList<>();
        for (int i = 0; i < mdataRes.data.size(); i++) {
            nameDistrictList.add(mdataRes.data.get(i).type + " - " + mdataRes.data.get(i).name);
        }
        setAdapterDistrict(nameDistrictList, mdataRes.data);

    }

    @Override
    public void getListWard(DataResponse<WardModel> mdataRes) {
        ArrayList<String> nameWardList = new ArrayList<>();
        for (int i = 0; i < mdataRes.data.size(); i++) {
            nameWardList.add(mdataRes.data.get(i).type + " - " + mdataRes.data.get(i).name);
        }
        setAdapterWardList(nameWardList);
    }

    private void setAdapterWardList(ArrayList<String> nameWardList) {
        final ArrayList<String> tempList = new ArrayList<>();
        tempList.add(getResources().getString(R.string.default_value_ward));
        tempList.addAll(nameWardList);
        ArrayAdapter<String> adapter = new CustomSpinnerAdapter<>(getActivity(),
                android.R.layout.simple_spinner_item,
                tempList);
        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        wardSpinner.setAdapter(adapter);
        wardSpinner.setOnItemSelectedListener(new MyProcessEventWard());
    }

    private void setAdapterDistrict(ArrayList<String> nameDistrictList, final ArrayList<DistrictModel> data) {
        final ArrayList<String> tempList = new ArrayList<>();
        tempList.add(getResources().getString(R.string.default_value_district));
        tempList.addAll(nameDistrictList);
        ArrayAdapter<String> adapter = new CustomSpinnerAdapter<>(getActivity(),
                android.R.layout.simple_spinner_item,
                tempList);

        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        districtSpinner.setAdapter(adapter);
        districtSpinner.setOnItemSelectedListener(new MyProcessEventDistrict(data));
    }

    private void setAdapterProvince(final ArrayList<String> nameProvinceList, final ArrayList<ProvinceModel> data) {
        final ArrayList<String> tempList = new ArrayList<>();
        tempList.add(getResources().getString(R.string.default_value_province));
        tempList.addAll(nameProvinceList);
        ArrayAdapter<String> adapter = new CustomSpinnerAdapter<>(getActivity(),
                android.R.layout.simple_spinner_item,
                tempList);
        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        provinceSpinner.setAdapter(adapter);
        provinceSpinner.setOnItemSelectedListener(new MyProcessEvent(data));
    }

<<<<<<< HEAD

    private void getDistristViaProvince(ProvinceModel pos) {
        presenter.getDistristViaProvince(pos.provinceid);
    }

    private void getWardViaDistrict(DistrictModel pos) {
        presenter.getWardViaDistrict(pos.districtid);
    }

    // selected item spinner
    private class MyProcessEvent implements AdapterView.OnItemSelectedListener {
=======
    private class MyProcessEvent<T> implements AdapterView.OnItemSelectedListener {
>>>>>>> 838d56146fb2c053d859bb9685019238d04ccd38
        ArrayList<ProvinceModel> nameProvinceList = new ArrayList<>();

        public MyProcessEvent(ArrayList<ProvinceModel> nameprovincelist) {
            this.nameProvinceList.addAll(nameprovincelist);
        }

        @Override
        public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
<<<<<<< HEAD
            if (i > 0) {
                getDistristViaProvince(nameProvinceList.get(i - 1));
                province = adapterView.getItemAtPosition(i).toString();
            }
=======

                if (adapterView.getId() == R.id.spinner_province_id) {
                    getDistristViaProvince(nameProvinceList.get(i));
                    province = adapterView.getItemAtPosition(i).toString();
                }

>>>>>>> 838d56146fb2c053d859bb9685019238d04ccd38
        }

        @Override
        public void onNothingSelected(AdapterView<?> adapterView) {

        }
    }

    private class MyProcessEventDistrict implements AdapterView.OnItemSelectedListener {
        ArrayList<DistrictModel> nameDistrictList = new ArrayList<>();

        public MyProcessEventDistrict(ArrayList<DistrictModel> data) {
            this.nameDistrictList = data;
        }

        @Override
        public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
<<<<<<< HEAD
            if (i > 0) {
                getWardViaDistrict(nameDistrictList.get(i - 1));
=======
            if (adapterView.getId() == R.id.spinner_district_id) {
                getWardViaDistrict(nameDistrictList.get(i));
>>>>>>> 838d56146fb2c053d859bb9685019238d04ccd38
                district = adapterView.getItemAtPosition(i).toString();
            }
        }

        @Override
        public void onNothingSelected(AdapterView<?> adapterView) {

        }
    }

    private class MyProcessEventWard implements AdapterView.OnItemSelectedListener {
        @Override
        public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
<<<<<<< HEAD
            if (i > 0) {
=======
            if (adapterView.getId() == R.id.spinner_ward_id) {
>>>>>>> 838d56146fb2c053d859bb9685019238d04ccd38
                ward = adapterView.getItemAtPosition(i).toString();
                addressTextView.setText(province + "," + district + "," + ward);
            }
        }

        @Override
        public void onNothingSelected(AdapterView<?> adapterView) {

        }
    }
}
